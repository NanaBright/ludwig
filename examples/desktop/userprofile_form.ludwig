# UserProfile Form - Desktop UI
# Generated on 2025-06-18 23:51:34

# Import Ludwig Desktop Framework
# let Desktop = import("desktop_framework")

let UserProfileForm = create form do
    let title = "UserProfile Form"
    let width = 600
    let height = 500
    let resizable = true

# Form controls
let form_controls = create controls do
    
    # Form title
    let form_title = Desktop.label({
        "text": "UserProfile Information",
        "font_size": 16,
        "font_weight": "bold",
        "text_color": "#1F2937"
    })
    
    # Input fields
    let name_label = Desktop.label("Name:")
    let name_input = Desktop.textbox({
        "placeholder": "Enter name",
        "required": true,
        "width": 300
    })
    
    let email_label = Desktop.label("Email:")
    let email_input = Desktop.textbox({
        "placeholder": "Enter email address",
        "validation": "email",
        "width": 300
    })
    
    let description_label = Desktop.label("Description:")
    let description_input = Desktop.textbox({
        "placeholder": "Enter description",
        "multiline": true,
        "height": 100,
        "width": 300
    })
    
    # Action buttons
    let save_button = Desktop.button({
        "text": "Save",
        "background_color": "#10B981",
        "text_color": "#FFFFFF",
        "width": 100
    })
    
    let cancel_button = Desktop.button({
        "text": "Cancel",
        "background_color": "#6B7280",
        "text_color": "#FFFFFF",
        "width": 100
    })
    
    let reset_button = Desktop.button({
        "text": "Reset",
        "background_color": "#F59E0B",
        "text_color": "#FFFFFF",
        "width": 100
    })

# Form layout
let form_layout = create grid_layout do
    let rows = 6
    let columns = 2
    let padding = 20
    let spacing = 10

# Add controls to layout
form_layout.add_control(form_title)  # Row 1, spans 2 columns
form_layout.add_control(name_label)
form_layout.add_control(name_input)
form_layout.add_control(email_label)
form_layout.add_control(email_input)
form_layout.add_control(description_label)
form_layout.add_control(description_input)

# Button layout
let button_layout = create stack_layout do
    let orientation = "horizontal"
    let spacing = 10

button_layout.add_control(save_button)
button_layout.add_control(cancel_button)
button_layout.add_control(reset_button)

form_layout.add_control(button_layout)  # Add button row

# Set form layout
UserProfileForm.set_layout(form_layout)

# Form validation
let validation_rules = create validation do
    let name_rules = {
        "required": true,
        "min_length": 2,
        "max_length": 50
    }
    
    let email_rules = {
        "required": true,
        "pattern": "email"
    }
    
    let description_rules = {
        "max_length": 500
    }

# Validation functions
let validate_form = create function do
    let errors = []
    
    # Validate name
    let name_value = name_input.get_text()
    if name_value.length < 2 do
        errors.add("Name must be at least 2 characters")
    
    # Validate email
    let email_value = email_input.get_text()
    if not is_valid_email(email_value) do
        errors.add("Please enter a valid email address")
    
    return errors

let is_valid_email = create function do
    # let email = parameter
    # return email.includes("@") and email.includes(".")

# Event handlers
let form_handlers = create handlers do
    
    # Save button handler
    let on_save_click = create handler do
        let validation_errors = validate_form()
        
        if validation_errors.length == 0 do
            # Collect form data
            let form_data = {
                "name": name_input.get_text(),
                "email": email_input.get_text(),
                "description": description_input.get_text(),
                "timestamp": get_current_timestamp()
            }
            
            # Save data (example using file service)
            let file_service = get_service("FileService")
            let json_data = json_stringify(form_data)
            file_service.write_text("userprofile_data.json", json_data)
            
            # Show success notification
            let notification_service = get_service("NotificationService")
            notification_service.show_info("Success", "UserProfile data saved successfully!")
            
            # Close form or reset
            reset_form()
            
        else do
            # Show validation errors
            let error_message = validation_errors.join("\n")
            let notification_service = get_service("NotificationService")
            notification_service.show_error("Validation Error", error_message)
    
    # Cancel button handler
    let on_cancel_click = create handler do
        # Close form without saving
        UserProfileForm.close()
    
    # Reset button handler
    let on_reset_click = create handler do
        reset_form()
        
        let notification_service = get_service("NotificationService")
        notification_service.show_info("Reset", "Form has been reset")

# Helper functions
let reset_form = create function do
    name_input.set_text("")
    email_input.set_text("")
    description_input.set_text("")

let get_current_timestamp = create function do
    # return new Date().toISOString()

# Bind event handlers
save_button.on("click", on_save_click)
cancel_button.on("click", on_cancel_click)
reset_button.on("click", on_reset_click)

# Form initialization
let initialize_form = create function do
    # Load existing data if available
    let file_service = get_service("FileService")
    
    if file_service.exists("userprofile_data.json") do
        let data_json = file_service.read_text("userprofile_data.json")
        let data = json_parse(data_json)
        
        # Populate form with existing data
        name_input.set_text(data.name or "")
        email_input.set_text(data.email or "")
        description_input.set_text(data.description or "")

# Export form for use in applications
let export_form = create function do
    return {
        "form": UserProfileForm,
        "initialize": initialize_form,
        "validate": validate_form,
        "reset": reset_form
    }

# Initialize when loaded
initialize_form()
