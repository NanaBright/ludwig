# MyDesktopApp - Desktop Application
# Generated on 2025-06-18 22:32:36

# Import Ludwig Desktop Framework
# let Desktop = import("desktop_framework")

# Create the main application
let app = create desktop_app do
    let name = "MyDesktopApp"
    let version = "1.0.0"

# Create main window
let main_window = create window do
    let title = "MyDesktopApp - Main Window"
    let width = 900
    let height = 700

# Create UI controls
let controls = create controls do
    # Title label
    let title_label = Desktop.label({
        "text": "Welcome to MyDesktopApp!",
        "font_size": 18,
        "text_color": "#2563EB"
    })
    
    # User input section
    let name_label = Desktop.label({
        "text": "Enter your name:",
        "font_size": 12
    })
    
    let name_textbox = Desktop.textbox({
        "placeholder": "Your name here...",
        "width": 300
    })
    
    # Action buttons
    let submit_button = Desktop.button({
        "text": "Submit",
        "background_color": "#10B981",
        "text_color": "#FFFFFF",
        "width": 120
    })
    
    let clear_button = Desktop.button({
        "text": "Clear",
        "background_color": "#6B7280",
        "text_color": "#FFFFFF",
        "width": 120
    })
    
    # Result display
    let result_label = Desktop.label({
        "text": "",
        "font_size": 14,
        "text_color": "#059669"
    })
    
    # Data list view
    let data_listview = Desktop.listview({
        "width": 400,
        "height": 200
    })
    
    # Add columns to list view
    data_listview.add_column("Name", 200)
    data_listview.add_column("Timestamp", 180)

# Set up layout
let layout = create stack_layout do
    let orientation = "vertical"
    let spacing = 15
    let padding = 20

# Add controls to layout
layout.add_control(title_label)
layout.add_control(name_label)
layout.add_control(name_textbox)

# Create horizontal layout for buttons
let button_layout = create grid_layout do
    let rows = 1
    let columns = 2
    let spacing = 10

button_layout.add_control(submit_button)
button_layout.add_control(clear_button)

layout.add_control(button_layout)
layout.add_control(result_label)
layout.add_control(data_listview)

# Set window layout
main_window.set_layout(layout)

# Event handlers
let event_handlers = create handlers do
    
    # Submit button click handler
    let on_submit_click = create handler do
        let name = name_textbox.get_text()
        
        if name.length > 0 do
            # Update result label
            result_label.set_text("Hello, " + name + "!")
            
            # Add to list view
            let timestamp = get_current_time()
            data_listview.add_item([name, timestamp])
            
            # Show notification
            let notification_service = app.get_service("NotificationService")
            notification_service.show_info("Greeting", "Hello, " + name + "!")
            
            # Save to file (demonstration of file service)
            let file_service = app.get_service("FileService")
            let data = name + " - " + timestamp + "\n"
            file_service.append_text("greetings.txt", data)
            
        else do
            # Show warning for empty input
            let notification_service = app.get_service("NotificationService")
            notification_service.show_warning("Input Required", "Please enter your name")
    
    # Clear button click handler
    let on_clear_click = create handler do
        name_textbox.set_text("")
        result_label.set_text("")
        
        # Show info notification
        let notification_service = app.get_service("NotificationService")
        notification_service.show_info("Cleared", "Form has been cleared")
    
    # Window close handler
    let on_window_closing = create handler do
        # Save application state
        let data = {
            "last_closed": get_current_time(),
            "total_greetings": data_listview.items.length
        }
        
        let file_service = app.get_service("FileService")
        file_service.write_text("app_state.json", json_stringify(data))
        
        # Show goodbye notification
        let notification_service = app.get_service("NotificationService")
        notification_service.show_info("Goodbye", "Thanks for using MyDesktopApp!")

# Bind event handlers
submit_button.on("click", on_submit_click)
clear_button.on("click", on_clear_click)
main_window.on("closing", on_window_closing)

# Application initialization
let initialize_app = create function do
    # Load previous state if exists
    let file_service = app.get_service("FileService")
    
    if file_service.exists("app_state.json") do
        let state_data = file_service.read_text("app_state.json")
        let state = json_parse(state_data)
        
        # Show welcome back message
        let notification_service = app.get_service("NotificationService")
        notification_service.show_info("Welcome Back", "Last used: " + state.last_closed)
    
    # Load previous greetings if file exists
    if file_service.exists("greetings.txt") do
        let greetings_data = file_service.read_text("greetings.txt")
        let lines = greetings_data.split("\n")
        
        for line in lines do
            if line.length > 0 do
                let parts = line.split(" - ")
                if parts.length >= 2 do
                    data_listview.add_item([parts[0], parts[1]])

# Services demonstration
let demonstrate_services = create function do
    
    # File Service example
    let file_service = app.get_service("FileService")
    let app_info = "Application: MyDesktopApp\nGenerated: 2025-06-18 22:32:36\n"
    file_service.write_text("app_info.txt", app_info)
    
    # System Service example
    let system_service = app.get_service("SystemService")
    let platform = system_service.get_platform()
    
    # HTTP Service example (commented out - would make actual requests)
    # let http_service = app.get_service("HttpService")
    # let response = http_service.get("https://api.example.com/status")
    
    # Database Service example (using local SQLite)
    let db_service = app.get_service("DatabaseService")
    
    # Create table for storing greetings
    db_service.execute_non_query({
        "query": "CREATE TABLE IF NOT EXISTS greetings (id INTEGER PRIMARY KEY, name TEXT, timestamp TEXT)",
        "parameters": []
    })

# Main application entry point
let main = create function do
    # Initialize the application
    initialize_app()
    
    # Demonstrate services
    demonstrate_services()
    
    # Add main window to application
    app.add_window(main_window)
    
    # Show startup notification
    let notification_service = app.get_service("NotificationService")
    notification_service.show_info("Startup", "MyDesktopApp is ready!")
    
    # Start the application
    app.run()

# Helper functions
let get_current_time = create function do
    # return new Date().toISOString()

let json_stringify = create function do
    # let data = parameter
    # return JSON.stringify(data)

let json_parse = create function do
    # let json_string = parameter
    # return JSON.parse(json_string)

# Run the application
main()
