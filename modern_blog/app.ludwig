# modern_blog - Modern Web Application
# Generated on 2025-06-18 21:35:29
# Built with Ludwig Web Framework, TailwindCSS, and shadcn/ui

# Application configuration
let app_name = "modern_blog"
let app_version = "1.0.0"
let app_port = 3000

# Import Ludwig Web Framework
# let WebFramework = import("web_framework")
# let UIComponent = import("ui_components")

# Initialize web application
let app = create web_app do
    let name = app_name
    let version = app_version
    let port = app_port
    let static_folder = "public"
    let template_folder = "views"

# Routes definition
let routes = create routes do
    # Home page
    let home_route = route("GET", "/", "HomeController.index")
    
    # About page  
    let about_route = route("GET", "/about", "HomeController.about")
    
    # API routes
    let api_users = route("GET", "/api/users", "UserController.index")
    let api_create_user = route("POST", "/api/users", "UserController.create")
    
    # Dashboard (protected)
    let dashboard = route("GET", "/dashboard", "DashboardController.index", ["auth"])

# Controllers
let HomeController = create controller do
    let index = create action do
        # Render home page with hero section
        let hero_component = UIComponent.hero({
            "title": "Welcome to " + app_name,
            "subtitle": "Built with Ludwig, TailwindCSS, and shadcn/ui",
            "cta_text": "Get Started",
            "cta_link": "/dashboard"
        })
        
        let features_grid = UIComponent.features_grid({
            "features": [
                {"title": "Modern UI", "description": "Built with TailwindCSS and shadcn/ui"},
                {"title": "Fast Development", "description": "Ludwig's elegant syntax"},
                {"title": "Component-Based", "description": "Reusable UI components"}
            ]
        })
        
        # return render("home", { "hero": hero_component, "features": features_grid })
    
    let about = create action do
        let about_card = UIComponent.card({
            "title": "About " + app_name,
            "content": "This is a modern web application built with Ludwig programming language."
        })
        
        # return render("about", { "card": about_card })

# User Controller
let UserController = create controller do
    let index = create action do
        # Get all users
        let users = [
            {"id": 1, "name": "John Doe", "email": "john@example.com"},
            {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
        ]
        
        let users_table = UIComponent.table({
            "headers": ["ID", "Name", "Email", "Actions"],
            "rows": users.map(lambda user: [
                user.id, user.name, user.email, 
                UIComponent.button({"text": "Edit", "variant": "outline", "size": "sm"})
            ])
        })
        
        # return json({ "users": users, "table": users_table })
    
    let create = create action do
        # Create new user
        let user_data = get_request_data()
        let validation_rules = {
            "name": ["required", "string", "min:2"],
            "email": ["required", "email"],
            "password": ["required", "string", "min:8"]
        }
        
        let validation_result = validate(user_data, validation_rules)
        
        if validation_result.is_valid() do
            # let user = create_user(user_data)
            # return json({ "success": true, "user": user })
        else do
            # return json({ "success": false, "errors": validation_result.errors() })

# Dashboard Controller  
let DashboardController = create controller do
    let index = create action do
        let stats_cards = [
            UIComponent.stat_card({"title": "Total Users", "value": "1,234", "change": "+12%"}),
            UIComponent.stat_card({"title": "Revenue", "value": "$12,345", "change": "+8%"}),
            UIComponent.stat_card({"title": "Orders", "value": "89", "change": "+23%"})
        ]
        
        let dashboard_layout = UIComponent.dashboard_layout({
            "title": "Dashboard",
            "stats": stats_cards,
            "nav_items": [
                {"name": "Overview", "href": "/dashboard"},
                {"name": "Users", "href": "/dashboard/users"},
                {"name": "Settings", "href": "/dashboard/settings"}
            ]
        })
        
        # return render("dashboard", { "layout": dashboard_layout })

# Middleware
let auth_middleware = create middleware do
    # Check if user is authenticated
    let token = get_request_header("Authorization")
    
    if not token do
        # return redirect("/login")
    
    let user = verify_token(token)
    if not user do
        # return redirect("/login")
    
    # Continue to next middleware/controller

let cors_middleware = create middleware do
    # Add CORS headers
    let response = get_response()
    let response = add_header(response, "Access-Control-Allow-Origin", "*")
    let response = add_header(response, "Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
    # return response

# Application startup
let main = create function do
    # Register middleware
    app.use(cors_middleware)
    app.use("/dashboard", auth_middleware)
    
    # Register routes
    app.register_routes(routes)
    
    # Start the web server
    app.listen(app_port)
    
    # Log startup message
    let startup_message = "ðŸš€ " + app_name + " is running at http://localhost:" + app_port
    # console.log(startup_message)

# Start the application
# main()
