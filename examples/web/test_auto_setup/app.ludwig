# test_auto_setup - Modern Web Application
# Generated on 2025-06-18 22:02:32
# Built with Ludwig Web Framework, TailwindCSS, and shadcn/ui

# Application configuration
let app_name = "test_auto_setup"
let app_version = "1.0.0"
let app_port = 3000

# Import Ludwig framework modules
# let WebFramework = import("web_framework")
# let Database = import("database")
# let Auth = import("auth")
# let UIComponent = import("ui_components")

# Database configuration
let db_config = {
    "driver": "sqlite",
    "database": "database.db",
    "host": "localhost",
    "port": 5432
}

# Authentication configuration  
let auth_config = {
    "jwt_secret": "change_this_secret_in_production",
    "token_expiry": 24
}

# Initialize web application with database and auth
let app = create web_app do
    let name = app_name
    let version = app_version
    let port = app_port
    let static_folder = "public"
    let template_folder = "views"
    let database = db_config
    let auth = auth_config

# Routes definition
let routes = create routes do
    # Home page
    let home_route = route("GET", "/", "HomeController.index")
    
    # About page  
    let about_route = route("GET", "/about", "HomeController.about")
    
    # Authentication routes
    let login_route = route("GET", "/login", "AuthController.login_form")
    let register_route = route("GET", "/register", "AuthController.register_form")
    let login_post = route("POST", "/login", "AuthController.login")
    let register_post = route("POST", "/register", "AuthController.register")
    let logout_route = route("POST", "/logout", "AuthController.logout", ["auth"])
    
    # API routes
    let api_users = route("GET", "/api/users", "UserController.index", ["auth"])
    let api_create_user = route("POST", "/api/users", "UserController.create", ["auth"])
    let api_auth_login = api_route("POST", "/api/auth/login", "AuthController.api_login")
    let api_auth_register = api_route("POST", "/api/auth/register", "AuthController.api_register")
    
    # Dashboard (protected)
    let dashboard = route("GET", "/dashboard", "DashboardController.index", ["auth"])

# Controllers
let HomeController = create controller do
    let index = create action do
        # Render home page with hero section
        let hero_component = UIComponent.hero({
            "title": "Welcome to " + app_name,
            "subtitle": "Built with Ludwig, TailwindCSS, and shadcn/ui",
            "cta_text": "Get Started",
            "cta_link": "/dashboard"
        })
        
        let features_grid = UIComponent.features_grid({
            "features": [
                {"title": "Modern UI", "description": "Built with TailwindCSS and shadcn/ui"},
                {"title": "Fast Development", "description": "Ludwig's elegant syntax"},
                {"title": "Component-Based", "description": "Reusable UI components"}
            ]
        })
        
        # return render("home", { "hero": hero_component, "features": features_grid })
    
    let about = create action do
        let about_card = UIComponent.card({
            "title": "About " + app_name,
            "content": "This is a modern web application built with Ludwig programming language."
        })
        
        # return render("about", { "card": about_card })

# User Controller
let UserController = create controller do
    let index = create action do
        # Get all users
        let users = [
            {"id": 1, "name": "John Doe", "email": "john@example.com"},
            {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
        ]
        
        let users_table = UIComponent.table({
            "headers": ["ID", "Name", "Email", "Actions"],
            "rows": users.map(lambda user: [
                user.id, user.name, user.email, 
                UIComponent.button({"text": "Edit", "variant": "outline", "size": "sm"})
            ])
        })
        
        # return json({ "users": users, "table": users_table })
    
    let create = create action do
        # Create new user
        let user_data = get_request_data()
        let validation_rules = {
            "name": ["required", "string", "min:2"],
            "email": ["required", "email"],
            "password": ["required", "string", "min:8"]
        }
        
        let validation_result = validate(user_data, validation_rules)
        
        if validation_result.is_valid() do
            # let user = create_user(user_data)
            # return json({ "success": true, "user": user })
        else do
            # return json({ "success": false, "errors": validation_result.errors() })

# Authentication Controller
let AuthController = create controller do
    
    let login_form = create action do
        # Render login form
        let login_form = UIComponent.auth_form({
            "type": "login",
            "title": "Sign In",
            "subtitle": "Welcome back to " + app_name,
            "submit_text": "Sign In",
            "fields": [
                {"name": "email", "type": "email", "label": "Email", "required": true},
                {"name": "password", "type": "password", "label": "Password", "required": true}
            ],
            "links": [
                {"text": "Don't have an account? Sign up", "href": "/register"}
            ]
        })
        
        # return render("auth/login", { "form": login_form })
    
    let register_form = create action do
        # Render registration form
        let register_form = UIComponent.auth_form({
            "type": "register",
            "title": "Create Account",
            "subtitle": "Join " + app_name + " today",
            "submit_text": "Create Account",
            "fields": [
                {"name": "name", "type": "text", "label": "Full Name", "required": true},
                {"name": "email", "type": "email", "label": "Email", "required": true},
                {"name": "password", "type": "password", "label": "Password", "required": true},
                {"name": "password_confirmation", "type": "password", "label": "Confirm Password", "required": true}
            ],
            "links": [
                {"text": "Already have an account? Sign in", "href": "/login"}
            ]
        })
        
        # return render("auth/register", { "form": register_form })
    
    let login = create action do
        # Handle login form submission
        let credentials = get_request_data()
        let validation_rules = {
            "email": ["required", "email"],
            "password": ["required", "string"]
        }
        
        let validation = validate(credentials, validation_rules)
        if not validation.is_valid() do
            # return redirect("/login").with_errors(validation.errors())
        
        let user = authenticate(credentials.email, credentials.password)
        if user do
            let token = generate_jwt_token(user)
            # return redirect("/dashboard").with_success("Welcome back!")
        else do
            # return redirect("/login").with_error("Invalid credentials")
    
    let register = create action do
        # Handle registration form submission
        let user_data = get_request_data()
        let validation_rules = {
            "name": ["required", "string", "min:2"],
            "email": ["required", "email", "unique:users"],
            "password": ["required", "string", "min:8", "confirmed"]
        }
        
        let validation = validate(user_data, validation_rules)
        if not validation.is_valid() do
            # return redirect("/register").with_errors(validation.errors())
        
        let user = create_user({
            "name": user_data.name,
            "email": user_data.email,
            "password": hash_password(user_data.password)
        })
        
        let token = generate_jwt_token(user)
        # return redirect("/dashboard").with_success("Account created successfully!")
    
    let logout = create action do
        # Handle logout
        clear_user_session()
        # return redirect("/").with_success("Logged out successfully")
    
    # API Authentication endpoints
    let api_login = create action do
        let credentials = get_request_data()
        let user = authenticate(credentials.email, credentials.password)
        
        if user do
            let token = generate_jwt_token(user)
            return json_success({
                "user": user,
                "token": token,
                "expires_in": 86400  # 24 hours
            }, "Login successful")
        else do
            return json_error("Invalid credentials", {}, 401)
    
    let api_register = create action do
        let user_data = get_request_data()
        let validation_rules = {
            "name": ["required", "string", "min:2"],
            "email": ["required", "email", "unique:users"],
            "password": ["required", "string", "min:8"]
        }
        
        let validation = validate(user_data, validation_rules)
        if not validation.is_valid() do
            return json_error("Validation failed", validation.errors(), 422)
        
        let user = create_user({
            "name": user_data.name,
            "email": user_data.email,
            "password": hash_password(user_data.password)
        })
        
        let token = generate_jwt_token(user)
        return json_success({
            "user": user,
            "token": token
        }, "Account created successfully")

# Dashboard Controller  
let DashboardController = create controller do
    let index = create action do
        let stats_cards = [
            UIComponent.stat_card({"title": "Total Users", "value": "1,234", "change": "+12%"}),
            UIComponent.stat_card({"title": "Revenue", "value": "$12,345", "change": "+8%"}),
            UIComponent.stat_card({"title": "Orders", "value": "89", "change": "+23%"})
        ]
        
        let dashboard_layout = UIComponent.dashboard_layout({
            "title": "Dashboard",
            "stats": stats_cards,
            "nav_items": [
                {"name": "Overview", "href": "/dashboard"},
                {"name": "Users", "href": "/dashboard/users"},
                {"name": "Settings", "href": "/dashboard/settings"}
            ]
        })
        
        # return render("dashboard", { "layout": dashboard_layout })

# Middleware
let auth_middleware = create middleware do
    # Check if user is authenticated
    let token = get_request_header("Authorization")
    
    if not token do
        # return redirect("/login")
    
    let user = verify_token(token)
    if not user do
        # return redirect("/login")
    
    # Continue to next middleware/controller

let cors_middleware = create middleware do
    # Add CORS headers
    let response = get_response()
    let response = add_header(response, "Access-Control-Allow-Origin", "*")
    let response = add_header(response, "Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
    # return response

# Application startup
let main = create function do
    # Register middleware
    app.use(cors_middleware)
    app.use("/dashboard", auth_middleware)
    
    # Register routes
    app.register_routes(routes)
    
    # Start the web server
    app.listen(app_port)
    
    # Log startup message
    let startup_message = "🚀 " + app_name + " is running at http://localhost:" + app_port
    # console.log(startup_message)

# Start the application
# main()
